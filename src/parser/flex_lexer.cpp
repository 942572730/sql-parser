#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1016] =
    {   0,
        0,    0,  147,  147,    2,    2,  151,  149,    4,    4,
      149,  149,  139,  145,  139,  139,  142,  139,  139,  139,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  139,  147,  148,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  134,    0,    1,  142,
      141,  140,  136,  135,  133,  137,  144,  144,  144,  144,

      144,  144,  116,  144,  117,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  118,
      144,  144,  119,  120,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  121,  122,  123,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  124,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  138,  147,  146,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  143,  140,
      104,  144,  105,  144,  144,  106,  144,  107,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  128,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  108,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  109,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  110,  144,  144,  111,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  112,  144,  144,  113,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  114,  144,  144,  144,  144,  144,  144,  144,
      144,  115,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      144,  144,  144,  144,  144,  144,   76,  144,   77,   78,
      144,  144,  144,  144,   79,  144,  144,  144,  144,   80,

      144,  144,  144,   81,   82,  144,  144,  144,  144,  144,
      144,  144,   83,  144,   84,   85,  144,  144,   86,  144,
       87,  127,  144,  144,  144,  144,  144,  144,   88,  144,
       89,   90,   91,  144,   93,  144,   94,  144,  144,  144,
      144,   95,  144,  144,  144,  144,  144,   96,  144,  144,
      144,  144,  144,  144,  144,  144,   97,  144,  144,  144,
      144,   98,   99,  100,  131,  144,  144,  144,  144,  144,
      144,  144,  144,  101,  144,  102,  144,  103,  130,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   56,   57,
      144,   58,  144,  144,  144,  144,  144,  144,   59,  144,
      144,  144,   60,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  132,   61,  144,   62,  144,   92,  144,
       63,   64,  144,  144,  144,  144,   65,   66,   67,   68,
      144,  129,  144,  144,  144,   69,   70,  144,  144,  144,
      144,  144,   71,  144,  144,  144,  144,  144,   72,  144,
      144,  144,   73,  144,  144,  144,   74,  144,  144,  144,
       75,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  144,   31,  144,  144,   32,  144,
       33,  144,  144,   34,  144,   35,  144,   36,   37,   38,
      144,   39,  144,  144,   41,   42,   43,   44,  144,  144,
       45,  126,  144,  144,   46,  144,  144,  144,   47,  144,
       48,  125,   49,   50,  144,   51,  144,  144,  144,   52,
       53,   54,   55,  144,  144,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   15,   16,   17,   18,
       19,  144,   20,  144,  144,   21,   22,   40,   23,  144,
       24,  144,  144,   25,   26,  144,   27,   28,  144,  144,
      144,   29,   30,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      144,   10,   11,  144,   12,  144,   13,  144,  144,   14,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      144,    7,  144,    8,    9,    2,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1023] =
    {   0,
        0,    0,  373,  368,   67,    0,  374, 4011,  133,  135,
      361,    0, 4011, 4011,  131,  345,  133,  132,  312,  300,
      129,  129,  137,  135,  145,  196,  171,  184,  188,  124,
      141,  183,  228,  230,  236,  235,    0,  250,  280,  323,
      257,  194,  231,  144,  243,    0,  281,    0,  259,  272,
      269,  273,    0,    0,  161,  259,  293,  292,  247,  224,
      381,  448,  502,  554,  602,  654,  301,  377,  702,  302,
      304,  379,  440,  754,  802,  449,  358,  453,  852,  904,
      490,  548,  461,  366,  164,  304, 4011,  221, 4011,  305,
      212,  209, 4011, 4011, 4011, 4011,    0,  147,  267,  296,

      317,  302,  322,  383,    0,  318,  338,  500,  391,  432,
      555,  445,  376,  386,  388,  428,  453,  555,  448,  459,
      484,  490,  496,  504,  503,  504,  502,  509,  504,    0,
      553,  549,  589,  554,  561,  552,  572,  599,  610,  597,
      603,  604,  599,  602,  611,  624,  623,    0,  627,  613,
      629,  656,  656,  648,  657,  660,  698,  655,  653,  672,
      674,  696,  672,  665,  669,  690,  710,  709,  708,  711,
      721,  719,  705,  729, 4011,    0, 4011,    0,  315,    0,
      212,    0,  353,  193,  190,    0,    0,    0,    0,  753,
      758,  767,  792,  763,  793,  846,  868,  796,  878,  864,

      909,  903,  906,  961,  946,  854,  970,  938,  972,  922,
     1022,  976,  994, 1024,  991, 1025, 1009, 1030, 1048, 1059,
     1054, 1078,  804, 1084, 1082, 1133, 1087, 1108, 1097, 1118,
     1143, 1168, 1172, 1162, 1187, 1186, 1202, 1211, 1220, 1226,
     1110, 1236, 1210, 1248, 1259, 1260, 1276, 1272, 1278, 1311,
     1300, 1302, 1328, 1343, 1346, 1250, 1344, 1330, 1356, 1378,
     1360, 1384, 1401, 1397, 1369, 1418, 1423,    0, 4011,  145,
        0,  728,    0,  768,  801,    0,  825,    0,  822,  835,
      860, 1154,  862,  912,  922,  982,  986, 1012,    0, 1058,
     1093, 1224, 1101, 1113, 1141, 1170, 1162, 1205,    0, 1246,

     1289, 1296, 1320, 1328, 1382, 1386, 1402, 1417,    0, 1412,
     1419, 1433, 1416, 1431, 1432, 1424, 1429, 1443, 1441, 1452,
     1454, 1455, 1458, 1440, 1453,    0, 1449, 1467, 1467, 1473,
     1477, 1472, 1473, 1461, 1465, 1468,    0, 1479, 1474, 1474,
     1490, 1492, 1497, 1487, 1486, 1495, 1509, 1491, 1505, 1509,
     1500, 1512,    0, 1498, 1503, 1506, 1515, 1514, 1511, 1518,
     1528,    0, 1529, 1530, 1521, 1538, 1532, 1528, 1548, 1529,
     1535, 1550, 1548, 1544,    0,  140, 1560, 1562, 1572, 1575,
     1576, 1581, 1597, 1585, 1594, 1598, 1606, 1629, 1635, 1630,
     1651, 1638, 1660, 1652, 1663, 1684, 1692, 1694, 1697, 1669,

     1705, 1703, 1726, 1686, 1708, 1738, 1729, 1742, 1743, 1759,
     1768, 1760, 1751, 1796, 1777, 1783, 1802, 1814, 1805, 1817,
     1831, 1813, 1826, 1850, 1859, 1845, 1854, 1867, 1875, 1884,
     1871, 1888, 1890, 1889, 1899, 1921, 1929, 1938, 1942, 1923,
     1957, 1959, 1933, 1954, 1978, 1973, 1963, 1992, 2007, 2008,
     2011, 2013, 2036, 2026, 2042, 1996, 2037, 2050, 2051, 2061,
     2065, 2067, 2093, 2090, 2076, 2095, 2099, 2105, 2121, 2124,
     2129, 2147, 2145, 2153, 2135, 2159, 2175, 2178, 2207, 2188,
     1551, 1575, 1617, 1725, 1735, 1800,    0, 1928,    0,    0,
     1920, 1969, 1982, 2061,    0, 2104, 2142, 2169, 2193, 2180,

     2199, 2195, 2196,    0,    0, 2198, 2201, 2197, 2204, 2225,
     2227, 2229,    0, 2216,    0,    0, 2236, 2222,    0, 2229,
        0,    0, 2241, 2229, 2224, 2231, 2232, 2249,    0, 2240,
        0,    0,    0, 2234,    0, 2245,    0, 2253, 2249, 2252,
     2244,    0, 2263, 2266, 2254, 2260, 2267,    0, 2281, 2285,
     2275, 2272, 2271, 2279, 2283, 2297,    0, 2296, 2293, 2298,
     2289,    0,    0, 2287,    0, 2305, 2296, 2290, 2311, 2294,
     2309, 2315, 2313,    0, 2301,    0, 2318,    0,    0, 2327,
     2335, 2329, 2331, 2337, 2339, 2341, 2369, 2352, 2353, 2363,
     2381, 2387, 2391, 2393, 2397, 2403, 2422, 2439, 2441, 2445,

     2447, 2453, 2436, 2455, 2479, 2484, 2485, 2476, 2493, 2514,
     2509, 2515, 2524, 2525, 2527, 2550, 2538, 2533, 2548, 2559,
     2563, 2567, 2569, 2581, 2578, 2599, 2602, 2593, 2617, 2603,
     2621, 2632, 2638, 2634, 2636, 2635, 2647, 2657, 2666, 2675,
     2687, 2691, 2690, 2692, 2708, 2723, 2700, 2729, 2740, 2745,
     2741, 2742, 2751, 2773, 2777, 2774, 2779, 2791, 2783, 2805,
     2796, 2807, 2817, 2808, 2841, 2836, 2833, 2850, 2847, 2879,
     2851, 2882, 2884, 2887, 2890, 2893, 2895, 2896,    0,    0,
     2364,    0, 2406, 2425, 2472, 2624, 2666, 2697,    0, 2696,
     2778, 2813,    0, 2844, 2844, 2856, 2891, 2900, 2886, 2890,

     2905, 2917, 2926,    0,    0, 2918,    0, 2931,    0, 2920,
        0,    0, 2921, 2938, 2925, 2934,    0,    0,    0,    0,
     2944,    0, 2949, 2944, 2934,    0,    0, 2950, 2940, 2941,
     2955, 2952,    0, 2961, 2959, 2944, 2962, 2968, 2953, 2956,
     2955, 2977,    0, 2975, 2979, 2979,    0, 2973, 2993, 2994,
        0, 2992, 2993, 3001, 2998, 3003, 3004, 3009, 3032, 3027,
     3026, 3038, 3057, 3055, 3043, 3060, 3072, 3066, 3091, 3078,
     3095, 3097, 3101, 3106, 3110, 3131, 3132, 3134, 3155, 3140,
     3163, 3146, 3149, 3150, 3168, 3184, 3174, 3186, 3198, 3203,
     3208, 3209, 3214, 3217, 3219, 3220, 3248, 3238, 3222, 3252,

     3254, 3257, 3263, 3262, 3287, 3273, 3292, 3306, 3296, 3322,
     3317, 3327, 3345, 3335, 3356, 3346, 3351, 3360, 3361, 3370,
     3375, 3400, 3405, 3384, 3007,    0, 3006, 3044, 3047, 3062,
        0, 3111, 3130,    0, 3183,    0, 3187,    0,    0,    0,
     3259,    0, 3262, 3287,    0,    0,    0,    0, 3317, 3336,
        0,    0, 3360, 3395,    0, 3384, 3406, 3389,    0, 3412,
     3398,    0,    0,    0, 3406,    0, 3418, 3419, 3404,    0,
        0,    0,    0, 3408, 3417, 3429, 3430, 3434, 3435, 3444,
     3453, 3445, 3468, 3459, 3463, 3478, 3469, 3499, 3484, 3494,
     3503, 3507, 3508, 3509, 3517, 3513, 3522, 3538, 3543, 3548,

     3547, 3551, 3552, 3566, 3557, 3562, 3576, 3581, 3587, 3592,
     3617, 3602, 3605, 3606, 3611, 3620, 3621, 3650, 3655, 3645,
     3636, 3659, 3661, 3669, 3671, 3693,    0,    0,    0,    0,
        0, 3516,    0, 3583, 3582,    0,    0,    0,    0, 3632,
        0, 3622, 3674,    0,    0, 3661,    0,    0, 3667, 3677,
     3690,    0,    0, 3694, 3695, 3699, 3704, 3705, 3733, 3710,
     3723, 3734, 3728, 3738, 3739, 3744, 3747, 3762, 3777, 3768,
     3773, 3778, 3787, 3779, 3783, 3808, 3811, 3796, 3812, 3813,
     3694,    0,    0, 3803,    0, 3809,    0, 3807, 3825,    0,
     3837, 3841, 3842, 3850, 3847, 3853, 3851, 3856, 3875, 3881,

     3872,    0, 3868,    0,    0, 3885, 3887, 3890, 3891, 3896,
        0,    0, 3906, 3915, 4011, 3980, 3985,  135, 3990, 3995,
     4000, 4005
    } ;

static const flex_int16_t yy_def[1023] =
    {   0,
     1015,    1, 1016, 1016, 1015,    5, 1015, 1015, 1015, 1015,
     1015, 1017, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1015, 1019, 1015, 1020, 1020, 1015,
     1020, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1022, 1022,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1020, 1015, 1015, 1017, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1015, 1019, 1015, 1020, 1020, 1020,
     1021, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62, 1020, 1015, 1015,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1020, 1020,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1018, 1018, 1018, 1018, 1018,   62,   62,   62,   62,   62,
     1018, 1018,   62,   62,    0, 1015, 1015, 1015, 1015, 1015,
     1015, 1015
    } ;

static const flex_int16_t yy_nxt[4079] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  110,  376,
      106,  135,  111,  100,  270,  101,  112,  107,  136,  102,
      103,  174,  113,  271,  108,  114,  105,  109,  182,  115,
      183,  116,   98,  104,   99,  110,  117,  106,  135,  111,
      100,  118,  101,  112,  107,  136,  102,  103,  174,  113,
      271,  108,  114,  105,  109,  125,  115,  127,  116,  376,

      137,  126,  184,  117,  138,  128,  130,  170,  118,  119,
      139,  129,  131,  132,  133,  171,  375,  120,  270,  134,
      121,   91,  125,  122,  127,  269,  123,  137,  126,  124,
      268,  138,  128,  130,  170,  189,  119,  139,  129,  131,
      132,  133,  171,  143,  120,  140,  134,  121,  151,  141,
      122,  172,  173,  123,  147,  142,  124,  144,  188,  152,
      179,   86,  148,  145,  146,  153,  149,  154,  184,  150,
      143,  155,  140,   86,   86,  151,  141,  178,  172,  173,
      180,  147,  142,  167,  144,  168,  152,  177,  169,  148,
      145,  146,  153,  149,  154,  156,  150,  157,  155,  272,

      158,  185,  183,  186,  187,   86,   86,  159,  160,  175,
      167,   96,  168,   92,   90,  169,  179,   86,  190,  190,
      273,  229,  156,   95,  157,  218,  272,  158,  274,  228,
      275,  219,  277,  276,  159,  160,  161,  278,  190,  190,
      162,  190,  281,  163,  164,  190,  190,  273,  229,  282,
      165,  283,  218,  166,   91,  274,  228,  275,  219,  277,
      276,  185,  183,  161,  278,  190,  190,  162,  190,  281,
      163,  164,   87, 1015,   47,  190,  282,  165,  283,   47,
      166,  178,  178,  267,  178,  178,  178,  178,  178,  178,
      220,  178,  178,  178,  190,  190,  230,  191,  221,  192,

      231,  279,  190,  190,  222,  193,  232,  194,  286,  296,
      267,  195,  196,  297,  190,  280,  190,  220,  287,  298,
     1015,  190,  190,  230,  191,  221,  192,  231,  279, 1015,
      190,  222,  193,  232,  194,  286,  296, 1015,  195,  196,
      297,  190,  280,  190,  299,  287,  298,  178,  178,  178,
     1015,  178,  178,  178,  178,  178,  178,  233,  178,  178,
      178,  234,  244, 1015,  288,  197,  190,  235,  300,  289,
      247,  299,  306,  245,  248,  294,  295,  190,  190,  246,
     1015,  265,  266,  307,  233,  198,  190, 1015,  234,  244,
      190,  288,  197,  190,  235,  300,  289,  247,  190,  306,

      245,  248,  294,  295,  190,  190,  246,  190,  265,  266,
      307,  308,  198,  190,  178,  199,  260,  190,  261,  190,
      309,  262,  200,  310,  284,  190,  285,  190,  311,  201,
      312,  313,  202,  314,  190,  316,  315,  317,  308,  190,
     1015, 1015,  199,  260, 1015,  261,  190,  309,  262,  200,
      310,  284, 1015,  285,  190,  311,  201,  312,  313,  202,
      314,  263,  316,  315,  317,  190,  190,  203,  290,  264,
      301,  204,  302,  291,  318,  205,  303,  319, 1015,  292,
      324,  206,  325,  304,  207,  190,  293,  305,  263,  326,
      327,  190,  190, 1015,  203,  290,  264,  301,  204,  302,

      291,  318,  205,  303,  319,  320,  292,  324,  206,  325,
      304,  207,  190,  293,  305,  321,  326,  327,  190,  190,
      322,  323,  328,  330,  329,  331,  208,  333,  209,  334,
      335,  336,  320,  210,  337,  338,  332,  339,  211,  190,
     1015,  340,  321,  341, 1015,  342,  190,  322,  323,  328,
      330,  329,  331,  208,  333,  209,  334,  335,  336,  343,
      210,  337,  338,  332,  339,  211,  190,  212,  340,  344,
      341,  190,  342,  345,  347,  213,  349,  346,  214,  348,
      350,  215,  354,  355,  216,  356,  343,  217,  357,  360,
      361,  190, 1015, 1015,  212, 1015,  344,  362,  190, 1015,

      345,  347,  213,  349,  346,  214,  348,  350,  215,  354,
      355,  216,  356,  351,  217,  357,  360,  361,  190,  190,
      223,  358,  352,  363,  362,  366,  224,  225,  226,  367,
      353,  364,  359,  227,  365,  368,  372,  373,  370,  190,
      351,  369,  374, 1015, 1015,  481,  190,  223,  358,  352,
      363,  371,  366,  224,  225,  226,  367,  353,  364,  359,
      227,  365,  368,  372,  373,  370,  190,  236,  369,  374,
      190,  190,  481, 1015,  377,  190,  381, 1015,  371,  382,
      190,  237, 1015, 1015,  190,  482, 1015,  238,  239, 1015,
      190,  190, 1015, 1015,  236,  190, 1015,  190,  190,  378,

      190,  377,  190,  381,  190, 1015,  382,  190,  237,  190,
      190,  190,  482,  190,  238,  239,  379,  190,  190,  190,
      240,  190,  190,  383,  380,  483,  378,  190,  241,  190,
      190,  190,  242,  190, 1015,  243,  190,  190,  484,  190,
      190,  190, 1015,  379, 1015, 1015,  190,  240,  190,  485,
      383,  380,  483, 1015, 1015,  241,  190,  190, 1015,  242,
      190,  384,  243,  190, 1015,  484,  190,  249,  190,  250,
      486,  190,  251, 1015, 1015, 1015,  485,  389, 1015,  252,
      253,  190, 1015,  190,  487,  190,  385,  402,  384,  190,
      190,  190,  490, 1015,  249,  190,  250,  486,  190,  251,

      386,  190,  387, 1015,  389,  190,  252,  253,  190,  388,
      190,  487,  190,  385,  402,  190,  190,  254,  190,  490,
      392,  255,  190,  190,  256,  257,  190,  386,  190,  387,
      393,  258,  190,  390,  259,  391,  388,  406,  394,  190,
      190,  190,  190,  395,  254,  491,  190,  392,  255, 1015,
      190,  256,  257,  190,  492,  190, 1015,  393,  258,  190,
      390,  259,  391,  190,  406,  394,  190,  190,  190,  404,
      395, 1015,  491,  190,  396,  190,  400,  401,  190,  397,
     1015,  492,  190,  190, 1015,  398,  190,  190,  405,  190,
      190, 1015,  399,  190, 1015,  493,  404,  403,  190, 1015,

      412,  396,  190,  400,  401,  190,  397,  190,  190,  190,
      190,  190,  398,  190,  190,  405,  190,  494,  413,  399,
      190,  415,  493, 1015,  403,  190,  190,  412,  190,  495,
     1015,  190, 1015,  417,  190,  190,  190,  407,  190,  408,
      190,  190,  190,  409,  494,  413,  190,  190,  415, 1015,
      410,  414,  416,  190,  411,  190,  495,  418,  190,  190,
      417,  190,  190, 1015,  407,  190,  408,  190,  190,  190,
      409,  190, 1015,  190,  190,  419,  190,  410,  414,  416,
      422,  411,  496, 1015,  418,  190,  190, 1015,  190,  190,
      420,  190,  190,  421,  190,  190,  190, 1015,  190,  190,

     1015,  190,  419,  190,  190,  424,  497,  422, 1015,  496,
      425,  423,  190,  430,  190,  190,  500,  420,  190,  190,
      421,  190,  190,  190,  190,  190,  190,  190,  190,  431,
      501,  190,  424,  497,  432,  190,  433,  425,  423, 1015,
      430,  190,  190,  500, 1015,  190,  190,  190,  190,  426,
      190,  190,  190, 1015,  190,  190,  431,  501, 1015,  427,
      190,  432,  190,  433,  428,  429,  434, 1015,  435,  488,
      190,  489,  190,  502,  190, 1015,  426,  190, 1015,  190,
      190,  436,  190,  437,  503,  190,  427,  190,  440,  190,
      504,  428,  429,  434,  438,  435,  488,  190,  489,  190,

      502, 1015,  439,  190,  190,  190,  190,  190,  436,  190,
      437,  503,  190,  441, 1015,  440,  190,  504,  442,  190,
     1015,  438,  505,  190,  190, 1015,  190,  190,  190,  439,
      190,  190,  190,  445,  443,  444,  190,  190, 1015,  190,
      441,  498,  448,  190,  446,  442,  190,  190,  190,  505,
      190,  190,  447,  190,  190,  190,  499,  190, 1015,  506,
      445,  443,  444,  190,  190,  190,  190,  466,  498,  448,
      190,  446,  450,  190,  190,  190,  190,  451,  449,  447,
      190,  452, 1015,  499,  190,  190,  506,  190, 1015,  190,
      190,  455,  190,  190,  466,  190,  190,  190,  456,  450,

      190, 1015,  453,  190,  451,  449,  507,  454,  452,  190,
     1015,  508,  190,  190,  190,  190,  190,  190,  455,  190,
      190, 1015,  190,  190,  190,  456,  457,  460,  190,  453,
     1015, 1015,  461,  507,  454,  458,  190,  190,  508,  190,
      190,  462,  190,  459,  190,  190,  190,  190,  190, 1015,
     1015,  509,  510,  457,  460,  190, 1015,  463,  468,  461,
      190,  190,  458,  190,  190,  190,  190,  190,  462,  467,
      459,  464,  190,  190,  190,  190,  472,  190,  509,  510,
      190,  190,  465,  190,  463,  468,  478,  190,  190,  469,
      190, 1015,  190,  190,  190,  190,  467,  190,  464,  470,

      190,  190,  471,  472,  190,  473,  190,  190,  190,  465,
      190, 1015,  511,  478,  476,  190,  469,  512,  190,  513,
      190,  190,  190, 1015,  190,  474,  470,  477,  190,  471,
      514,  475,  473,  190,  190,  190,  480,  515,  190,  511,
      190,  476,  190,  516,  512,  190,  513,  517,  190,  518,
      479,  519,  474,  520,  477,  190,  521,  514,  475,  522,
      190,  190,  190,  480,  515,  190,  523,  190,  524,  525,
      516,  526,  527,  530,  517,  528,  518,  479,  519,  531,
      520,  532,  190,  521,  533,  529,  522,  190,  534,  535,
      536,  537,  538,  523,  539,  524,  525,  540,  526,  527,

      530,  541,  528,  542,  543,  544,  531,  545,  532,  546,
      547,  533,  529,  548,  549,  534,  535,  536,  537,  538,
      550,  539,  551,  552,  540,  553,  554,  555,  541,  556,
      542,  543,  544,  557,  545,  558,  546,  547,  559,  560,
      548,  549,  561,  562,  563,  564,  565,  550,  569,  551,
      552,  570,  553,  554,  555,  566,  556,  567,  571,  568,
      557,  572,  558,  573,  574,  559,  560,  575,  578,  561,
      562,  563,  564,  565,  579,  569,  576,  190,  570,  580,
      577,  679,  566, 1015,  567,  571,  568, 1015,  572,  190,
      573,  574,  581,  190,  575,  578, 1015,  190,  190,  190,

      582,  579,  190,  576,  190,  680,  580,  577,  679,  190,
      583,  190,  190,  190,  190,  190,  190, 1015,  190,  581,
      190,  584,  190,  190,  190,  190,  190,  582, 1015,  190,
      586,  190,  680,  585,  190,  190,  190,  583,  190,  190,
      190,  190,  190,  190,  587,  190,  588,  190,  584,  190,
      190,  592,  190, 1015,  681,  190, 1015,  586,  190, 1015,
      585,  190,  190,  590, 1015,  589,  190,  190,  190,  594,
      190,  587,  190,  588,  190,  190, 1015,  190,  592,  190,
      190,  681,  190,  591, 1015, 1015,  600, 1015,  190,  190,
      590,  593,  589,  190,  190,  190,  594,  190, 1015,  190,

      190,  190,  190,  604,  190,  596,  190,  190,  595,  190,
      591,  597,  599,  600,  190,  190,  190,  602,  593, 1015,
      190,  190,  190,  190,  190,  190,  598,  190,  190,  190,
      604,  190,  596,  190,  190,  595,  190,  601,  597,  599,
      190,  190,  190,  190,  602,  190,  606,  190,  190,  190,
      190,  605,  190,  598,  603,  190,  190,  607,  190,  190,
      190,  190,  682,  190,  601,  683,  190,  190,  612,  190,
      190, 1015,  190,  606,  608,  190,  190,  190,  605,  190,
      190,  603,  190,  609,  607,  190,  190,  190,  190,  682,
      190,  611,  683,  190,  190,  612,  190,  190,  610, 1015,

      190,  608,  190,  190,  190,  190,  190,  190,  614,  613,
      609, 1015,  190,  190,  190,  190, 1015,  684,  611,  190,
      190,  190,  190,  190,  190,  610,  615,  190,  616, 1015,
      190,  190,  190,  190,  190,  614,  613,  618,  617,  190,
      190,  190,  190,  190,  684,  620,  190,  190,  190,  190,
      190,  190,  619,  615,  190,  616,  621,  190,  190, 1015,
      190,  190,  624,  190,  618,  617,  190,  190,  190,  190,
      190,  625,  620,  622, 1015,  190,  190,  190,  190,  619,
     1015,  190,  190,  621,  626, 1015,  623,  190,  190,  624,
      190,  190,  627, 1015,  190,  190,  190,  630,  625, 1015,

      622,  190,  628,  190,  190,  190,  632,  190,  190,  190,
     1015,  626,  190,  623,  190,  190,  190,  629,  190,  627,
      633,  190,  631,  190,  630,  190,  190,  190,  190,  628,
     1015,  190,  190,  632,  190,  190,  190,  634,  190,  190,
      190,  685,  635,  190,  629,  686,  190,  633,  190,  631,
      190, 1015,  190,  190,  190,  190,  638,  636,  190,  190,
      190,  637, 1015,  190,  634,  190,  190,  190,  685,  635,
      190,  190,  686,  190,  190,  190,  190,  190,  641,  190,
      644, 1015,  190,  638,  636,  190,  190,  190,  637,  639,
      190,  190,  640,  190,  190,  190,  190,  190,  190,  687,

      190,  190,  190,  190,  643,  641,  190,  644,  642,  645,
      190, 1015, 1015,  653,  688,  190,  639,  190,  190,  640,
      646,  190,  190,  190,  190,  190,  687,  190,  190,  190,
      190,  643, 1015,  190,  647,  642,  645,  190,  649,  648,
      653,  688,  190,  190,  190,  190, 1015,  646,  190,  650,
      190,  190,  190,  190,  190,  190,  190,  190,  651,  190,
      190,  647,  652,  190,  654,  649,  648,  655,  190, 1015,
      190,  190,  190,  190,  190,  190,  650,  190,  190,  190,
      190,  190,  190, 1015,  190,  651,  190,  190,  190,  652,
      190,  654,  689,  190,  655,  190,  656,  657,  190,  658,

      190,  190,  190, 1015,  190,  190,  190,  190,  661,  190,
      190,  190,  190,  190,  190,  190,  663,  659,  660,  689,
      190,  662,  190,  656,  657,  190,  658,  190,  690,  190,
      190,  190,  190, 1015,  190,  661,  190,  190,  664,  190,
      190,  190,  190,  663,  659,  660,  190,  665,  662,  190,
      672,  666,  190,  667,  190,  690,  668,  190,  190,  190,
      669,  190,  190,  190,  190,  664,  190, 1015,  190,  190,
      190,  670,  190,  190,  665,  691,  190,  672,  666,  190,
      667, 1015,  190,  668,  190,  190,  671,  669,  190,  190,
      190,  190,  190,  190,  673,  190,  190,  190,  670,  190,

     1015,  692,  691,  190,  675,  190,  693,  674,  676,  190,
      694,  190,  190,  671,  695,  190,  696,  190,  678,  190,
      697,  673,  190,  190,  190,  190,  698,  677,  692,  699,
      700,  675,  190,  693,  674,  676,  701,  694,  702,  190,
      703,  695,  190,  696,  190,  678,  704,  697,  705,  706,
      707,  190,  190,  698,  677,  708,  699,  700,  709,  710,
      711,  712,  713,  701,  716,  702,  717,  703,  714,  718,
      719,  190,  722,  704,  723,  705,  706,  707,  724,  715,
      720,  721,  708,  725,  726,  709,  710,  711,  712,  713,
      727,  716,  728,  717,  729,  714,  718,  719,  730,  722,

      731,  723,  732,  733,  734,  724,  715,  720,  721,  735,
      725,  726,  736,  737,  738,  739,  740,  727,  741,  728,
      742,  729,  743,  744,  745,  730,  746,  731,  747,  732,
      733,  734,  748,  749,  750,  751,  735, 1015, 1015,  736,
      737,  738,  739,  740,  190,  741,  190,  742,  190,  743,
      744,  745,  190,  746,  190,  747,  757,  752,  190,  748,
      749,  750,  751, 1015,  190,  753,  754,  756,  755,  190,
      190,  190,  190,  190,  190,  190,  190, 1015,  190,  190,
      190,  190,  758,  757,  752,  190,  190, 1015,  759,  190,
      190,  190,  753,  754,  756,  755,  190,  190,  190,  190,

      190,  190,  825,  190,  190,  190,  190,  190,  190,  758,
      190,  760, 1015,  190,  190,  759,  190,  190,  190,  761,
      190,  763,  762,  826,  190,  190, 1015,  190,  190,  825,
      190,  190, 1015,  190,  190,  190,  764,  190,  760,  190,
      190,  190,  827, 1015, 1015,  190,  761,  190,  763,  762,
      826,  190,  766,  190,  765,  190,  190,  190,  190,  190,
      768,  190,  190,  764,  190, 1015,  190,  190,  769,  827,
      190,  767,  190,  190, 1015, 1015,  190,  770,  190,  766,
      190,  765,  190,  190,  190,  190,  190,  768,  828,  190,
      190,  190,  190,  190, 1015,  769,  190,  190,  767,  190,

      190,  190,  190,  190,  770,  190,  775,  771,  774,  190,
      190,  190,  772,  190, 1015,  828,  190,  190,  773,  190,
      190,  190,  190,  190, 1015, 1015,  777,  776,  190,  190,
      190,  190,  190,  775,  771,  774, 1015,  190, 1015,  772,
      190,  190,  190,  190,  190,  773,  190, 1015,  190,  190,
      190,  190,  190,  777,  776,  190,  778,  190,  190,  190,
     1015,  190,  190,  779,  190,  190,  780,  190,  190,  190,
      190,  190, 1015,  190,  781,  190,  190,  190,  190,  190,
      190, 1015,  190,  778,  782,  190,  190,  190,  190,  190,
      779,  190,  190,  780,  190,  190,  190,  190,  190,  783,

      190,  781,  190,  190,  190, 1015,  190,  190,  785, 1015,
      190,  782,  190,  190,  190,  190,  190,  784,  190,  190,
      190,  787,  190,  190, 1015,  190,  783,  190, 1015,  786,
      190,  190,  788,  190,  190,  785,  190,  190,  190,  190,
      190,  789,  190,  190,  784,  190,  190,  190,  787,  190,
      829,  190,  190,  190,  190,  190,  786,  190,  190,  788,
      791,  190, 1015,  190,  792,  190,  190,  190,  789,  190,
      790,  190,  190,  190,  190,  190,  190,  829,  190,  190,
      190,  190,  190,  190,  190,  190,  795,  791,  793,  794,
     1015,  792,  190,  830,  190, 1015,  190,  790,  190,  190,

      190,  190,  190,  190,  190,  796,  797,  798,  190,  190,
      190,  190,  190,  795,  831,  793,  794,  190, 1015,  190,
      830,  190,  799,  832,  190,  190, 1015,  190,  190,  190,
      190,  190,  796,  797,  798,  190,  190,  190,  800,  190,
      190,  831,  802, 1015,  190,  190,  190, 1015,  801,  799,
      832,  190,  190,  803,  190,  190,  190,  190,  190,  190,
      190, 1015,  190, 1015,  190,  800,  190,  190,  190,  802,
      804,  805,  190,  190,  806,  801,  807,  190,  190,  190,
      803, 1015,  190, 1015,  190,  190,  190,  190,  190,  190,
      190,  190,  809,  190,  190,  190,  810,  804,  805,  808,

      812,  806,  833,  807,  190,  190,  190, 1015,  190,  190,
      190,  190,  811,  190,  190,  190,  190,  190,  190,  809,
      190,  190,  190,  810,  190,  190,  808,  812,  190,  833,
      834, 1015,  813,  190,  190,  190, 1015,  190,  190,  811,
      190,  190,  190,  190,  190,  190, 1015,  190,  814,  190,
      190,  190,  190,  190,  190,  190,  815,  834,  190,  813,
      190,  190,  816,  818,  190,  835,  817,  190,  821,  190,
      190,  190,  190,  190, 1015,  814,  836,  190,  190,  819,
      190,  190,  837,  815,  190,  190, 1015,  190,  190,  816,
      818,  190,  835,  817,  190,  821,  190,  190,  820,  190,

      190,  190,  822,  836,  190,  190,  819,  190,  838,  837,
      824,  190,  190,  190,  190,  190,  190,  839,  840,  190,
      823,  190,  841,  190,  190,  820,  190,  190,  190,  822,
      190,  190,  190,  190,  190,  838,  842,  824,  843,  190,
      190,  844,  845,  190,  839,  840,  190,  823,  190,  841,
      846,  190,  847,  848,  190,  849,  850,  190,  851,  190,
      190,  852,  853,  842,  854,  843,  855,  856,  844,  845,
      857,  858,  859,  860,  861,  862,  863,  846,  864,  847,
      848,  865,  849,  850,  866,  851,  867,  868,  852,  853,
      869,  854,  870,  855,  856,  871,  872,  857,  858,  859,

      860,  861,  862,  863,  873,  864,  874,  875,  865,  190,
      190,  866, 1015,  867,  868,  190, 1015,  869,  190,  870,
      877,  878,  871,  872,  927,  879,  190, 1015, 1015,  190,
      190,  873,  928,  874,  875,  190,  190,  190,  190,  876,
      190,  190,  190,  882,  190,  190,  190,  877,  878,  190,
     1015,  927,  879,  190,  881,  190,  190,  190,  880,  928,
      885,  929,  190,  190,  190,  190,  876,  190,  190,  190,
      882,  190,  190,  190,  190,  190,  190,  190,  930,  884,
      190,  881,  190,  190,  883,  880,  931,  885,  929,  190,
      190,  190,  190,  886,  190,  889,  190,  190,  887,  190,

     1015,  190,  190,  190,  190,  930,  884,  190,  190,  190,
      190,  883,  890,  931,  190,  190,  190,  888,  190,  190,
      886,  190,  889,  190,  190,  887,  932,  190,  190,  891,
      190,  894,  190,  892,  190,  190,  190,  893,  190,  890,
     1015,  190,  190,  190,  888,  190,  895,  190,  190,  190,
      190,  190, 1015,  932,  190,  190,  891,  190,  894,  190,
      892,  190,  933,  190,  893,  190,  190,  190,  190,  190,
      190,  190,  190,  895,  190,  190,  190,  190,  190,  896,
      190,  898,  897,  190,  190,  190,  190,  190, 1015,  933,
      190,  900,  190,  190,  190,  190,  190,  934,  190,  190,

      190,  190,  935,  190,  190,  190,  896,  190,  898,  897,
      190,  190,  190,  190,  190,  190,  899,  901,  900,  190,
      190,  190,  902,  190,  934,  190,  190,  190,  190,  935,
      190,  190,  190,  904,  903,  190,  190,  190,  190,  190,
      190, 1015,  190,  899,  901,  190,  190,  190,  190,  902,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      904,  903,  190,  190,  190,  190,  190,  190,  905,  190,
      906,  907,  190,  190,  190,  190,  936, 1015,  190,  910,
      190,  190,  190,  190,  190,  190,  190,  908,  937,  190,
      190,  190,  190,  909,  190,  905,  190,  906,  907,  190,

      190,  190,  190,  936,  190,  912,  910,  190,  911,  190,
      190, 1015,  190,  190,  908,  937,  190,  190,  190,  938,
      909,  190,  913,  190,  190, 1015,  190,  190,  914,  190,
      916,  190,  912,  190,  190,  911,  190,  190,  915,  190,
      190, 1015, 1015,  190,  190, 1015,  938,  939, 1015,  913,
      190,  190,  190,  940,  190,  914,  190,  916,  917,  190,
      190,  190,  190,  190,  190,  915,  190,  919,  921,  920,
      190,  190,  190,  190,  939,  918,  922,  190,  923,  190,
      940,  190,  190,  190,  941,  917,  190,  190,  190,  190,
      190,  190,  190,  190,  919,  921,  920,  190,  190,  190,

      190,  190,  918,  922,  190,  923,  924,  190,  942,  190,
      190,  941,  190,  925,  190,  190,  943,  190,  926,  190,
      190,  190,  190,  944,  190,  190,  945,  946,  190,  947,
      948,  949,  950,  924,  190,  942,  951,  190,  952,  190,
      925,  953,  190,  943,  190,  926,  954,  190,  190,  190,
      944,  190,  956,  945,  946, 1015,  947,  948,  949,  950,
      955,  190,  190,  951,  190,  952,  190,  190,  953,  190,
      190,  190,  190,  954,  190,  957,  190,  958,  190,  956,
      190,  190,  190,  959, 1015,  190,  190,  955,  190,  190,
      190,  960,  961,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  957,  190,  958,  190,  190,  190,  190,  190,
      959,  190,  190,  190,  962,  190,  190,  190,  960,  961,
      190,  190,  190,  190,  963,  190,  190,  190,  190,  981,
      190,  190,  190,  190,  190,  964,  190, 1015,  190,  190,
      190,  962,  190,  190,  190,  190,  190,  190,  190,  965,
      190,  963,  190,  190,  190,  190,  981,  190,  190,  190,
      190,  190,  964,  190,  967,  190,  190,  190,  190,  190,
      969,  190,  190,  190,  190,  190,  965,  190,  966,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      968,  967,  190,  190,  190,  190,  190,  969,  971,  190,

      982,  190,  190,  190,  190,  966,  190,  190,  970,  190,
      190,  190,  190,  190,  983,  190,  190,  968,  190,  190,
      190,  190,  190,  190,  972,  971,  190,  982,  190,  190,
      190,  190,  973,  974,  190,  970,  190,  190,  190,  190,
      190,  983,  190,  190,  975,  190,  190,  984,  190,  190,
      190,  972,  985,  190,  190,  190,  190,  190,  190,  973,
      974,  190,  190,  976,  190,  190,  190,  190,  977,  190,
      190,  975,  190,  190,  984,  190,  190,  978,  190,  985,
      190,  190,  190, 1015,  190,  190,  190,  190,  190,  190,
      976,  986,  190,  987,  190,  977,  190,  988,  190,  190,

      190,  979,  989,  190,  978,  190,  190,  990,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  980,  986,  190,
      987,  190,  190,  190,  988,  190, 1001,  190,  979,  989,
      190,  190,  190,  190,  990,  190,  190,  190,  190,  190,
      992,  190,  190,  190,  980,  190,  991,  190,  190,  190,
      190,  190, 1015, 1001,  190,  190,  190,  190,  190,  190,
      190,  190,  994,  190,  190,  190,  993,  992,  190,  190,
      190,  190,  190,  991,  190,  190,  190,  190,  190,  190,
     1015,  190,  190,  190,  190,  996, 1015,  190,  190,  994,
      190,  190,  190,  993,  190,  190,  190,  190,  190,  190,

      190, 1015,  190,  190,  190,  190,  190,  995,  190, 1015,
      190,  190,  996, 1000,  190,  190,  190,  190, 1015,  997,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  995, 1002,  999,  190,  998, 1003,
     1000,  190,  190,  190, 1004,  190,  997,  190,  190,  190,
      190,  190,  190, 1005,  190,  190,  190,  190,  190,  190,
      190, 1015, 1002,  999,  190,  998, 1003,  190,  190, 1006,
      190, 1004,  190,  190,  190,  190,  190,  190,  190,  190,
     1005,  190, 1007, 1008,  190,  190,  190,  190,  190, 1011,
      190,  190,  190, 1009,  190,  190, 1006,  190,  190, 1012,

      190,  190, 1013, 1010,  190,  190,  190,  190,  190, 1007,
     1008,  190,  190,  190,  190,  190, 1011,  190,  190,  190,
     1009, 1014,  190,  190,  190,  190, 1012,  190,  190, 1013,
     1010,  190,  190,  190,  190,  190, 1015, 1015, 1015,  190,
      190, 1015, 1015,  190, 1015,  190, 1015, 1015, 1014,  190,
      190,  190,  190, 1015,  190,  190, 1015, 1015, 1015,  190,
      190, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
      190, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,  190,
       46,   46,   46,   46,   46,   88, 1015, 1015,   88,   88,
      176,  176,  176, 1015,  176,  178, 1015,  178,  178,  178,

      181, 1015,  181,  181,  181,  190, 1015,  190,  190,  190,
        7, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015
    } ;

static const flex_int16_t yy_chk[4079] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1018,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  376,
       23,   30,   24,   21,  270,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   55,   25,
       55,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   27,   25,   28,   25,  185,

       32,   27,  184,   25,   32,   28,   29,   42,   25,   26,
       32,   28,   29,   29,   29,   42,  181,   26,   92,   29,
       26,   91,   27,   26,   28,   88,   26,   32,   27,   26,
       85,   32,   28,   29,   42,   60,   26,   32,   28,   29,
       29,   29,   42,   34,   26,   33,   29,   26,   36,   33,
       26,   43,   43,   26,   35,   33,   26,   34,   59,   36,
       49,   49,   35,   34,   34,   36,   35,   38,   56,   35,
       34,   38,   33,   50,   50,   36,   33,   52,   43,   43,
       51,   35,   33,   41,   34,   41,   36,   47,   41,   35,
       34,   34,   36,   35,   38,   39,   35,   39,   38,   99,

       39,   57,   57,   58,   58,   86,   86,   39,   39,   45,
       41,   20,   41,   90,   90,   41,  179,  179,   67,   70,
      100,   71,   39,   19,   39,   67,   99,   39,  100,   70,
      101,   67,  102,  101,   39,   39,   40,  103,   67,   70,
       40,   71,  106,   40,   40,   67,   70,  100,   71,  106,
       40,  107,   67,   40,   16,  100,   70,  101,   67,  102,
      101,  183,  183,   40,  103,   67,   70,   40,   71,  106,
       40,   40,   11,    7,    4,   77,  106,   40,  107,    3,
       40,   61,   61,   84,   61,   61,   61,   61,   61,   61,
       68,   61,   61,   61,   68,   77,   72,   61,   68,   61,

       72,  104,   77,   84,   68,   61,   72,   61,  109,  113,
       84,   61,   61,  114,   68,  104,   72,   68,  109,  115,
        0,   68,   77,   72,   61,   68,   61,   72,  104,    0,
       84,   68,   61,   72,   61,  109,  113,    0,   61,   61,
      114,   68,  104,   72,  116,  109,  115,   61,   62,   62,
        0,   62,   62,   62,   62,   62,   62,   73,   62,   62,
       62,   73,   76,    0,  110,   62,   76,   73,  117,  110,
       78,  116,  119,   76,   78,  112,  112,   73,   83,   76,
        0,   83,   83,  120,   73,   62,   76,    0,   73,   76,
       78,  110,   62,   76,   73,  117,  110,   78,   83,  119,

       76,   78,  112,  112,   73,   83,   76,   81,   83,   83,
      120,  121,   62,   76,   62,   63,   81,   78,   81,   63,
      122,   81,   63,  123,  108,   83,  108,   81,  124,   63,
      125,  126,   63,  127,   81,  128,  127,  129,  121,   63,
        0,    0,   63,   81,    0,   81,   63,  122,   81,   63,
      123,  108,    0,  108,   81,  124,   63,  125,  126,   63,
      127,   82,  128,  127,  129,   82,   63,   64,  111,   82,
      118,   64,  118,  111,  131,   64,  118,  132,    0,  111,
      134,   64,  135,  118,   64,   82,  111,  118,   82,  136,
      137,   64,   82,    0,   64,  111,   82,  118,   64,  118,

      111,  131,   64,  118,  132,  133,  111,  134,   64,  135,
      118,   64,   82,  111,  118,  133,  136,  137,   64,   65,
      133,  133,  138,  139,  138,  139,   65,  140,   65,  141,
      142,  143,  133,   65,  144,  145,  139,  146,   65,   65,
        0,  147,  133,  149,    0,  150,   65,  133,  133,  138,
      139,  138,  139,   65,  140,   65,  141,  142,  143,  151,
       65,  144,  145,  139,  146,   65,   65,   66,  147,  152,
      149,   66,  150,  153,  154,   66,  155,  153,   66,  154,
      156,   66,  158,  159,   66,  160,  151,   66,  161,  163,
      164,   66,    0,    0,   66,    0,  152,  165,   66,    0,

      153,  154,   66,  155,  153,   66,  154,  156,   66,  158,
      159,   66,  160,  157,   66,  161,  163,  164,   66,   69,
       69,  162,  157,  166,  165,  168,   69,   69,   69,  169,
      157,  167,  162,   69,  167,  170,  172,  173,  171,   69,
      157,  170,  174,    0,    0,  272,   69,   69,  162,  157,
      166,  171,  168,   69,   69,   69,  169,  157,  167,  162,
       69,  167,  170,  172,  173,  171,   69,   74,  170,  174,
      190,   74,  272,    0,  191,  191,  194,    0,  171,  194,
      194,   74,    0,    0,  192,  274,    0,   74,   74,    0,
      190,   74,    0,    0,   74,  191,    0,  190,   74,  192,

      194,  191,  191,  194,  192,    0,  194,  194,   74,  193,
      195,  192,  274,  198,   74,   74,  193,  190,   74,   75,
       75,  223,  191,  195,  193,  275,  192,  194,   75,  193,
      195,  192,   75,  198,    0,   75,  193,  195,  277,   75,
      198,  223,    0,  193,    0,    0,   75,   75,  223,  279,
      195,  193,  275,    0,    0,   75,  193,  195,    0,   75,
      198,  196,   75,  196,    0,  277,   75,   79,  223,   79,
      280,  206,   79,    0,    0,    0,  279,  200,    0,   79,
       79,  200,    0,  196,  281,  197,  197,  206,  196,   79,
      196,  206,  283,    0,   79,  199,   79,  280,  206,   79,

      197,  200,  199,    0,  200,  197,   79,   79,  200,  199,
      196,  281,  197,  197,  206,  199,   79,   80,  206,  283,
      202,   80,  199,  203,   80,   80,  201,  197,  200,  199,
      202,   80,  197,  201,   80,  201,  199,  210,  203,  210,
      202,   80,  199,  203,   80,  284,  201,  202,   80,    0,
      203,   80,   80,  201,  285,  208,    0,  202,   80,  210,
      201,   80,  201,  205,  210,  203,  210,  202,   80,  208,
      203,    0,  284,  201,  204,  208,  205,  205,  204,  204,
        0,  285,  208,  205,    0,  204,  210,  207,  209,  209,
      205,    0,  204,  212,    0,  286,  208,  207,  204,    0,

      212,  204,  208,  205,  205,  204,  204,  207,  215,  209,
      205,  213,  204,  212,  207,  209,  209,  287,  213,  204,
      212,  215,  286,    0,  207,  204,  217,  212,  215,  288,
        0,  213,    0,  217,  207,  215,  209,  211,  213,  211,
      212,  214,  216,  211,  287,  213,  217,  218,  215,    0,
      211,  214,  216,  217,  211,  215,  288,  218,  213,  211,
      217,  214,  216,    0,  211,  219,  211,  218,  214,  216,
      211,  221,    0,  217,  218,  219,  220,  211,  214,  216,
      221,  211,  290,    0,  218,  219,  211,    0,  214,  216,
      220,  221,  219,  220,  218,  222,  220,    0,  221,  225,

        0,  224,  219,  220,  227,  224,  291,  221,    0,  290,
      225,  222,  219,  227,  229,  222,  293,  220,  221,  225,
      220,  224,  222,  220,  227,  228,  225,  241,  224,  228,
      294,  227,  224,  291,  229,  230,  230,  225,  222,    0,
      227,  229,  222,  293,    0,  228,  225,  241,  224,  226,
      226,  227,  228,    0,  241,  230,  228,  294,    0,  226,
      231,  229,  230,  230,  226,  226,  231,    0,  231,  282,
      226,  282,  228,  295,  241,    0,  226,  226,    0,  234,
      231,  232,  230,  232,  296,  232,  226,  231,  234,  233,
      297,  226,  226,  231,  232,  231,  282,  226,  282,  234,

      295,    0,  233,  236,  235,  232,  234,  231,  232,  233,
      232,  296,  232,  235,    0,  234,  233,  297,  236,  237,
        0,  232,  298,  236,  235,    0,  234,  243,  238,  233,
      236,  235,  232,  239,  237,  238,  233,  239,    0,  237,
      235,  292,  243,  240,  240,  236,  237,  243,  238,  298,
      236,  235,  242,  242,  243,  238,  292,  239,    0,  300,
      239,  237,  238,  240,  239,  244,  237,  256,  292,  243,
      240,  240,  245,  242,  243,  238,  245,  246,  244,  242,
      242,  246,    0,  292,  239,  244,  300,  256,    0,  248,
      240,  248,  244,  247,  256,  249,  245,  246,  249,  245,

      242,    0,  247,  245,  246,  244,  301,  247,  246,  248,
        0,  302,  244,  247,  256,  249,  248,  251,  248,  252,
      247,    0,  249,  245,  246,  249,  250,  251,  250,  247,
        0,    0,  252,  301,  247,  250,  248,  251,  302,  252,
      247,  253,  249,  250,  251,  253,  252,  258,  250,    0,
        0,  303,  304,  250,  251,  250,    0,  254,  258,  252,
      254,  257,  250,  255,  251,  253,  252,  258,  253,  257,
      250,  255,  253,  259,  258,  250,  261,  261,  303,  304,
      254,  257,  255,  255,  254,  258,  265,  254,  257,  259,
      255,    0,  253,  259,  258,  260,  257,  261,  255,  260,

      259,  262,  260,  261,  261,  262,  265,  254,  257,  255,
      255,    0,  305,  265,  264,  260,  259,  306,  263,  307,
      259,  262,  260,    0,  261,  263,  260,  264,  262,  260,
      308,  263,  262,  265,  264,  266,  267,  310,  263,  305,
      267,  264,  260,  311,  306,  263,  307,  312,  262,  313,
      266,  314,  263,  315,  264,  266,  316,  308,  263,  317,
      267,  264,  266,  267,  310,  263,  318,  267,  319,  320,
      311,  321,  322,  324,  312,  323,  313,  266,  314,  325,
      315,  327,  266,  316,  328,  323,  317,  267,  329,  330,
      331,  332,  333,  318,  334,  319,  320,  335,  321,  322,

      324,  336,  323,  338,  339,  340,  325,  341,  327,  342,
      343,  328,  323,  344,  345,  329,  330,  331,  332,  333,
      346,  334,  347,  348,  335,  349,  350,  351,  336,  352,
      338,  339,  340,  354,  341,  355,  342,  343,  356,  357,
      344,  345,  358,  359,  360,  361,  363,  346,  365,  347,
      348,  366,  349,  350,  351,  363,  352,  364,  367,  364,
      354,  368,  355,  369,  370,  356,  357,  371,  373,  358,
      359,  360,  361,  363,  374,  365,  372,  377,  366,  378,
      372,  481,  363,    0,  364,  367,  364,    0,  368,  379,
      369,  370,  380,  381,  371,  373,    0,  377,  382,  378,

      381,  374,  384,  372,  377,  482,  378,  372,  481,  379,
      383,  385,  380,  381,  383,  386,  379,    0,  382,  380,
      381,  385,  384,  387,  377,  382,  378,  381,    0,  384,
      387,  385,  482,  386,  383,  386,  379,  383,  385,  380,
      381,  383,  386,  387,  388,  382,  388,  390,  385,  384,
      387,  392,  389,    0,  483,  392,    0,  387,  385,    0,
      386,  383,  386,  390,    0,  389,  388,  390,  391,  394,
      387,  388,  389,  388,  390,  392,    0,  393,  392,  389,
      395,  483,  392,  391,    0,    0,  400,    0,  391,  394,
      390,  393,  389,  388,  390,  391,  394,  393,    0,  389,

      395,  396,  392,  404,  393,  397,  400,  395,  396,  397,
      391,  398,  399,  400,  399,  391,  394,  402,  393,    0,
      402,  396,  401,  404,  393,  405,  398,  395,  396,  397,
      404,  398,  397,  400,  399,  396,  397,  401,  398,  399,
      402,  399,  401,  403,  402,  405,  407,  402,  396,  401,
      404,  406,  405,  398,  403,  406,  397,  408,  398,  408,
      409,  399,  484,  403,  401,  485,  407,  402,  413,  401,
      403,    0,  405,  407,  409,  406,  410,  412,  406,  408,
      409,  403,  406,  410,  408,  411,  408,  409,  413,  484,
      403,  412,  485,  407,  415,  413,  410,  412,  411,    0,

      416,  409,  406,  410,  412,  411,  408,  409,  416,  414,
      410,    0,  411,  414,  415,  413,    0,  486,  412,  417,
      416,  415,  419,  410,  412,  411,  417,  416,  418,    0,
      422,  418,  411,  414,  420,  416,  414,  420,  419,  417,
      414,  415,  419,  423,  486,  422,  417,  416,  421,  419,
      422,  418,  421,  417,  420,  418,  423,  422,  418,    0,
      414,  420,  426,  423,  420,  419,  417,  424,  421,  419,
      423,  427,  422,  424,    0,  421,  425,  422,  418,  421,
        0,  420,  426,  423,  428,    0,  425,  424,  431,  426,
      423,  427,  429,    0,  424,  421,  425,  431,  427,    0,

      424,  430,  429,  425,  428,  432,  434,  433,  431,  426,
        0,  428,  429,  425,  424,  431,  435,  430,  427,  429,
      435,  430,  433,  425,  431,  432,  434,  433,  430,  429,
        0,  428,  432,  434,  433,  431,  435,  436,  436,  429,
      440,  488,  437,  435,  430,  491,  437,  435,  430,  433,
      443,    0,  432,  434,  433,  438,  440,  438,  436,  439,
      440,  439,    0,  435,  436,  436,  437,  440,  488,  437,
      443,  444,  491,  437,  441,  438,  442,  443,  444,  439,
      447,    0,  438,  440,  438,  436,  439,  440,  439,  441,
      446,  444,  442,  437,  441,  445,  442,  443,  444,  492,

      447,  441,  438,  442,  446,  444,  439,  447,  445,  448,
      446,    0,    0,  456,  493,  445,  441,  446,  444,  442,
      449,  441,  445,  442,  449,  450,  492,  447,  451,  448,
      452,  446,    0,  456,  450,  445,  448,  446,  452,  451,
      456,  493,  445,  454,  449,  450,    0,  449,  451,  453,
      452,  449,  450,  453,  457,  451,  448,  452,  454,  455,
      456,  450,  455,  454,  457,  452,  451,  458,  459,    0,
      454,  449,  450,  453,  457,  451,  453,  452,  460,  455,
      453,  457,  461,    0,  462,  454,  455,  458,  459,  455,
      454,  457,  494,  465,  458,  459,  460,  461,  460,  462,

      453,  457,  461,    0,  462,  460,  455,  464,  465,  461,
      463,  462,  466,  465,  458,  459,  467,  463,  464,  494,
      465,  466,  468,  460,  461,  460,  462,  464,  496,  461,
      463,  462,  466,    0,  464,  465,  467,  463,  469,  466,
      465,  470,  468,  467,  463,  464,  471,  469,  466,  468,
      475,  470,  475,  470,  464,  496,  471,  463,  469,  466,
      472,  470,  473,  467,  472,  469,  471,    0,  470,  468,
      474,  473,  475,  471,  469,  497,  476,  475,  470,  475,
      470,    0,  473,  471,  472,  469,  474,  472,  470,  473,
      474,  472,  477,  471,  476,  478,  476,  474,  473,  475,

        0,  498,  497,  476,  478,  480,  499,  477,  478,  473,
      500,  472,  477,  474,  501,  478,  502,  474,  480,  477,
      503,  476,  478,  476,  479,  480,  506,  479,  498,  507,
      508,  478,  480,  499,  477,  478,  509,  500,  510,  477,
      511,  501,  478,  502,  479,  480,  512,  503,  514,  517,
      518,  479,  480,  506,  479,  520,  507,  508,  523,  524,
      525,  526,  527,  509,  530,  510,  534,  511,  528,  536,
      538,  479,  540,  512,  541,  514,  517,  518,  543,  528,
      539,  539,  520,  544,  545,  523,  524,  525,  526,  527,
      546,  530,  547,  534,  549,  528,  536,  538,  550,  540,

      551,  541,  552,  553,  554,  543,  528,  539,  539,  555,
      544,  545,  556,  558,  559,  560,  561,  546,  564,  547,
      566,  549,  567,  568,  569,  550,  570,  551,  571,  552,
      553,  554,  572,  573,  575,  577,  555,    0,    0,  556,
      558,  559,  560,  561,  580,  564,  582,  566,  583,  567,
      568,  569,  581,  570,  584,  571,  585,  580,  586,  572,
      573,  575,  577,    0,  580,  581,  582,  584,  583,  588,
      589,  580,  581,  582,  584,  583,  585,    0,  586,  581,
      590,  584,  587,  585,  580,  586,  587,    0,  590,  588,
      589,  580,  581,  582,  584,  583,  588,  589,  591,  581,

      590,  584,  681,  585,  592,  586,  587,  590,  593,  587,
      594,  591,    0,  587,  595,  590,  588,  589,  591,  592,
      596,  595,  593,  683,  592,  591,    0,  590,  593,  681,
      594,  592,    0,  587,  595,  593,  596,  594,  591,  597,
      596,  595,  684,    0,    0,  591,  592,  596,  595,  593,
      683,  592,  598,  603,  597,  593,  598,  594,  599,  597,
      600,  595,  600,  596,  601,    0,  597,  596,  601,  684,
      602,  599,  604,  603,    0,    0,  598,  602,  599,  598,
      603,  597,  600,  598,  601,  599,  597,  600,  685,  600,
      602,  601,  604,  608,    0,  601,  605,  602,  599,  604,

      603,  606,  607,  598,  602,  599,  609,  605,  608,  600,
      609,  601,  606,  608,    0,  685,  605,  602,  607,  604,
      608,  606,  607,  605,    0,    0,  611,  610,  606,  607,
      609,  610,  612,  609,  605,  608,    0,  609,    0,  606,
      608,  613,  614,  605,  615,  607,  611,    0,  606,  607,
      618,  610,  612,  611,  610,  617,  613,  609,  610,  612,
        0,  613,  614,  616,  615,  619,  617,  616,  613,  614,
      618,  615,    0,  611,  619,  617,  620,  618,  610,  612,
      621,    0,  617,  613,  622,  619,  623,  616,  613,  614,
      616,  615,  619,  617,  616,  625,  620,  618,  624,  623,

      621,  619,  617,  620,  622,    0,  623,  621,  625,    0,
      628,  622,  619,  623,  616,  625,  626,  624,  624,  627,
      630,  627,  625,  620,    0,  624,  623,  621,    0,  626,
      628,  622,  627,  623,  629,  625,  626,  628,  631,  627,
      630,  629,  625,  626,  624,  624,  627,  630,  627,  632,
      686,  634,  636,  635,  629,  633,  626,  628,  631,  627,
      635,  629,    0,  626,  637,  631,  627,  630,  629,  632,
      633,  634,  636,  635,  638,  633,  632,  686,  634,  636,
      635,  629,  633,  639,  637,  631,  639,  635,  638,  638,
        0,  637,  640,  687,  638,    0,  632,  633,  634,  636,

      635,  638,  633,  639,  641,  640,  642,  643,  642,  644,
      639,  637,  640,  639,  688,  638,  638,  647,    0,  640,
      687,  638,  644,  690,  641,  645,    0,  643,  642,  644,
      639,  641,  640,  642,  643,  642,  644,  647,  645,  640,
      646,  688,  648,    0,  647,  645,  648,    0,  646,  644,
      690,  641,  645,  649,  643,  642,  644,  649,  651,  652,
      646,    0,  650,    0,  647,  645,  648,  646,  653,  648,
      650,  651,  645,  648,  652,  646,  653,  649,  651,  652,
      649,    0,  650,    0,  649,  651,  652,  646,  653,  650,
      654,  656,  655,  648,  655,  653,  657,  650,  651,  654,

      659,  652,  691,  653,  649,  651,  652,    0,  658,  650,
      654,  656,  658,  661,  655,  653,  657,  654,  656,  655,
      659,  655,  660,  657,  662,  664,  654,  659,  658,  691,
      692,    0,  660,  661,  663,  658,    0,  654,  656,  658,
      661,  655,  660,  657,  662,  664,    0,  659,  663,  660,
      667,  662,  664,  666,  663,  658,  665,  692,  665,  660,
      661,  663,  666,  668,  669,  694,  667,  668,  671,  660,
      667,  662,  664,  666,    0,  663,  695,  667,  665,  669,
      666,  663,  696,  665,  669,  665,    0,  668,  671,  666,
      668,  669,  694,  667,  668,  671,  670,  667,  670,  672,

      666,  673,  672,  695,  674,  665,  669,  675,  697,  696,
      676,  669,  677,  678,  668,  671,  670,  698,  699,  672,
      674,  673,  700,  670,  674,  670,  672,  675,  673,  672,
      676,  674,  677,  678,  675,  697,  701,  676,  702,  677,
      678,  703,  706,  670,  698,  699,  672,  674,  673,  700,
      708,  674,  710,  713,  675,  714,  715,  676,  716,  677,
      678,  721,  723,  701,  724,  702,  725,  728,  703,  706,
      729,  730,  731,  732,  734,  735,  736,  708,  737,  710,
      713,  738,  714,  715,  739,  716,  740,  741,  721,  723,
      742,  724,  744,  725,  728,  745,  746,  729,  730,  731,

      732,  734,  735,  736,  748,  737,  749,  750,  738,  752,
      753,  739,    0,  740,  741,  755,    0,  742,  754,  744,
      756,  757,  745,  746,  825,  758,  758,    0,    0,  752,
      753,  748,  827,  749,  750,  755,  752,  753,  754,  754,
      756,  757,  755,  761,  760,  754,  758,  756,  757,  759,
        0,  825,  758,  758,  760,  762,  752,  753,  759,  827,
      765,  828,  755,  761,  760,  754,  754,  756,  757,  759,
      761,  760,  764,  758,  763,  762,  759,  766,  829,  764,
      765,  760,  762,  768,  763,  759,  830,  765,  828,  767,
      761,  760,  764,  767,  763,  770,  759,  766,  768,  764,

        0,  763,  762,  768,  766,  829,  764,  765,  769,  767,
      768,  763,  771,  830,  772,  770,  767,  769,  773,  764,
      767,  763,  770,  774,  766,  768,  832,  775,  769,  772,
      768,  775,  771,  773,  772,  769,  767,  774,  773,  771,
        0,  772,  770,  774,  769,  773,  776,  775,  776,  777,
      774,  778,    0,  832,  775,  769,  772,  780,  775,  771,
      773,  772,  833,  782,  774,  773,  783,  784,  776,  777,
      774,  778,  779,  776,  775,  776,  777,  780,  778,  779,
      781,  783,  781,  782,  780,  785,  783,  784,    0,  833,
      782,  787,  779,  783,  784,  776,  777,  835,  778,  779,

      781,  786,  837,  788,  780,  785,  779,  781,  783,  781,
      782,  787,  785,  783,  784,  789,  786,  788,  787,  779,
      790,  786,  789,  788,  835,  791,  792,  781,  786,  837,
      788,  793,  785,  796,  794,  789,  795,  796,  787,  799,
      790,    0,  789,  786,  788,  791,  792,  790,  786,  789,
      788,  793,  791,  792,  794,  798,  795,  796,  793,  799,
      796,  794,  789,  795,  796,  797,  799,  790,  797,  800,
      798,  801,  791,  792,  802,  798,  841,    0,  793,  804,
      803,  794,  798,  795,  796,  797,  799,  802,  843,  800,
      806,  801,  797,  803,  802,  797,  800,  798,  801,  804,

      803,  802,  798,  841,  805,  807,  804,  803,  805,  807,
      806,    0,  797,  809,  802,  843,  800,  806,  801,  844,
      803,  802,  808,  808,  805,    0,  804,  803,  809,  807,
      811,  805,  807,  809,  811,  805,  807,  806,  810,  810,
      809,    0,    0,  808,  812,    0,  844,  849,    0,  808,
      808,  805,  814,  850,  811,  809,  807,  811,  812,  810,
      809,  811,  813,  816,  812,  810,  810,  814,  817,  815,
      808,  812,  814,  815,  849,  813,  818,  818,  819,  814,
      850,  811,  813,  816,  853,  812,  810,  820,  817,  813,
      816,  812,  821,  815,  814,  817,  815,  818,  819,  814,

      815,  824,  813,  818,  818,  819,  821,  820,  854,  813,
      816,  853,  821,  822,  820,  817,  856,  822,  823,  821,
      815,  824,  823,  857,  818,  819,  858,  860,  824,  861,
      865,  867,  868,  821,  820,  854,  869,  822,  874,  821,
      822,  875,  823,  856,  822,  823,  876,  877,  824,  823,
      857,  878,  879,  858,  860,    0,  861,  865,  867,  868,
      878,  880,  882,  869,  822,  874,  876,  877,  875,  823,
      881,  878,  879,  876,  877,  880,  884,  881,  878,  879,
      885,  880,  882,  883,    0,  883,  887,  878,  880,  882,
      881,  884,  886,  876,  877,  886,  884,  881,  878,  879,

      885,  889,  880,  884,  881,  883,  887,  885,  880,  882,
      883,  890,  883,  887,  888,  886,  888,  881,  884,  886,
      891,  889,  886,  884,  892,  893,  894,  885,  889,  932,
      896,  890,  883,  887,  895,  894,  888,    0,  890,  897,
      891,  888,  886,  888,  892,  893,  894,  891,  889,  895,
      896,  892,  893,  894,  895,  898,  932,  896,  890,  897,
      899,  895,  894,  888,  901,  900,  897,  891,  902,  903,
      905,  892,  893,  894,  905,  898,  895,  896,  900,  906,
      899,  895,  898,  904,  901,  900,  897,  899,  902,  903,
      904,  901,  900,  907,  905,  902,  903,  905,  908,  906,

      934,  905,  898,  904,  909,  900,  906,  899,  907,  910,
      904,  901,  900,  907,  935,  902,  903,  904,  908,  912,
      907,  905,  913,  914,  909,  908,  906,  934,  915,  910,
      904,  909,  911,  912,  911,  907,  910,  916,  917,  912,
      907,  935,  913,  914,  916,  908,  912,  940,  915,  913,
      914,  909,  942,  921,  911,  915,  910,  916,  917,  911,
      912,  911,  920,  918,  916,  917,  912,  918,  919,  913,
      914,  916,  919,  921,  940,  915,  922,  920,  923,  942,
      921,  911,  920,    0,  916,  917,  924,  918,  925,  920,
      918,  943,  919,  946,  918,  919,  922,  949,  923,  919,

      921,  925,  950,  922,  920,  923,  924,  951,  925,  920,
      926,  954,  955,  924,  918,  925,  956,  926,  943,  919,
      946,  957,  958,  922,  949,  923,  981,  960,  925,  950,
      926,  954,  955,  924,  951,  925,  956,  926,  954,  955,
      961,  957,  958,  956,  926,  963,  959,  960,  957,  958,
      959,  962,    0,  981,  960,  964,  965,  926,  954,  955,
      961,  966,  967,  956,  967,  963,  962,  961,  957,  958,
      959,  962,  963,  959,  960,  964,  965,  959,  962,  968,
        0,  966,  964,  965,  967,  970,    0,  961,  966,  967,
      971,  967,  963,  962,  969,  972,  974,  959,  962,  968,

      975,    0,  964,  965,  973,  970,  968,  969,  966,    0,
      971,  967,  970,  978,  969,  972,  974,  971,    0,  973,
      975,  969,  972,  974,  973,  976,  968,  975,  977,  979,
      980,  973,  970,  978,  969,  984,  977,  971,  976,  986,
      978,  969,  972,  974,  988,  976,  973,  975,  977,  979,
      980,  973,  976,  989,  991,  977,  979,  980,  992,  993,
      978,    0,  984,  977,  995,  976,  986,  994,  997,  991,
      996,  988,  976,  998,  991,  977,  979,  980,  992,  993,
      989,  991,  994,  996,  995,  992,  993,  994,  997, 1001,
      996,  995,  999,  998,  994,  997,  991,  996, 1000, 1003,

      998,  991, 1006,  999, 1007,  992,  993, 1008, 1009,  994,
      996,  995,  999, 1010,  994,  997, 1001,  996, 1000,  999,
      998, 1008, 1006, 1013, 1007, 1000, 1003, 1008, 1009, 1006,
      999, 1007, 1014, 1010, 1008, 1009,    0,    0,    0,  999,
     1010,    0,    0, 1013,    0, 1000,    0,    0, 1008, 1006,
     1013, 1007, 1014,    0, 1008, 1009,    0,    0,    0, 1014,
     1010,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1013,    0,    0,    0,    0,    0,    0,    0,    0, 1014,
     1016, 1016, 1016, 1016, 1016, 1017,    0,    0, 1017, 1017,
     1019, 1019, 1019,    0, 1019, 1020,    0, 1020, 1020, 1020,

     1021,    0, 1021, 1021, 1021, 1022,    0, 1022, 1022, 1022,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1909 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1923 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2210 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1016 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1015 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 133:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 140:
#line 204 "flex_lexer.l"
case 141:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 229 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3031 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1016 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1016 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1015);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 234 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

